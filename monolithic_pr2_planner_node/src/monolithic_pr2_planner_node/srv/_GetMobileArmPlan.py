"""autogenerated by genpy from monolithic_pr2_planner_node/GetMobileArmPlanRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import std_msgs.msg

class GetMobileArmPlanRequest(genpy.Message):
  _md5sum = "fed560522cabe43b5602366b861eca2c"
  _type = "monolithic_pr2_planner_node/GetMobileArmPlanRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
geometry_msgs/PoseStamped start


float64[] rarm_start
float64[] larm_start
float64[] body_start
float64[] rarm_goal
float64[] larm_goal
float64[] body_goal


geometry_msgs/PoseStamped goal


float64[] absolute_xyzrpy_tolerance


geometry_msgs/PoseStamped rarm_object


geometry_msgs/PoseStamped larm_object

float64 egraph_eps
float64 final_egraph_eps
float64 dec_egraph_eps
float64 initial_eps
float64 final_eps
float64 dec_eps
bool feedback_paths
bool save_egraph
bool use_egraph


================================================================================
MSG: geometry_msgs/PoseStamped
# A Pose with reference coordinate frame and timestamp
Header header
Pose pose

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['start','rarm_start','larm_start','body_start','rarm_goal','larm_goal','body_goal','goal','absolute_xyzrpy_tolerance','rarm_object','larm_object','egraph_eps','final_egraph_eps','dec_egraph_eps','initial_eps','final_eps','dec_eps','feedback_paths','save_egraph','use_egraph']
  _slot_types = ['geometry_msgs/PoseStamped','float64[]','float64[]','float64[]','float64[]','float64[]','float64[]','geometry_msgs/PoseStamped','float64[]','geometry_msgs/PoseStamped','geometry_msgs/PoseStamped','float64','float64','float64','float64','float64','float64','bool','bool','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       start,rarm_start,larm_start,body_start,rarm_goal,larm_goal,body_goal,goal,absolute_xyzrpy_tolerance,rarm_object,larm_object,egraph_eps,final_egraph_eps,dec_egraph_eps,initial_eps,final_eps,dec_eps,feedback_paths,save_egraph,use_egraph

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMobileArmPlanRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.rarm_start is None:
        self.rarm_start = []
      if self.larm_start is None:
        self.larm_start = []
      if self.body_start is None:
        self.body_start = []
      if self.rarm_goal is None:
        self.rarm_goal = []
      if self.larm_goal is None:
        self.larm_goal = []
      if self.body_goal is None:
        self.body_goal = []
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.absolute_xyzrpy_tolerance is None:
        self.absolute_xyzrpy_tolerance = []
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      if self.egraph_eps is None:
        self.egraph_eps = 0.
      if self.final_egraph_eps is None:
        self.final_egraph_eps = 0.
      if self.dec_egraph_eps is None:
        self.dec_egraph_eps = 0.
      if self.initial_eps is None:
        self.initial_eps = 0.
      if self.final_eps is None:
        self.final_eps = 0.
      if self.dec_eps is None:
        self.dec_eps = 0.
      if self.feedback_paths is None:
        self.feedback_paths = False
      if self.save_egraph is None:
        self.save_egraph = False
      if self.use_egraph is None:
        self.use_egraph = False
    else:
      self.start = geometry_msgs.msg.PoseStamped()
      self.rarm_start = []
      self.larm_start = []
      self.body_start = []
      self.rarm_goal = []
      self.larm_goal = []
      self.body_goal = []
      self.goal = geometry_msgs.msg.PoseStamped()
      self.absolute_xyzrpy_tolerance = []
      self.rarm_object = geometry_msgs.msg.PoseStamped()
      self.larm_object = geometry_msgs.msg.PoseStamped()
      self.egraph_eps = 0.
      self.final_egraph_eps = 0.
      self.dec_egraph_eps = 0.
      self.initial_eps = 0.
      self.final_eps = 0.
      self.dec_eps = 0.
      self.feedback_paths = False
      self.save_egraph = False
      self.use_egraph = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w))
      length = len(self.rarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rarm_start))
      length = len(self.larm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.larm_start))
      length = len(self.body_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.body_start))
      length = len(self.rarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.rarm_goal))
      length = len(self.larm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.larm_goal))
      length = len(self.body_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.body_goal))
      _x = self
      buff.write(_struct_3I.pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w))
      length = len(self.absolute_xyzrpy_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.absolute_xyzrpy_tolerance))
      _x = self
      buff.write(_struct_3I.pack(_x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs))
      _x = self.rarm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs))
      _x = self.larm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d3B.pack(_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.egraph_eps, _x.final_egraph_eps, _x.dec_egraph_eps, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.feedback_paths, _x.save_egraph, _x.use_egraph))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_start = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_goal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_goal = struct.unpack(pattern, str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_goal = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.absolute_xyzrpy_tolerance = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rarm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.larm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 107
      (_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.egraph_eps, _x.final_egraph_eps, _x.dec_egraph_eps, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.feedback_paths, _x.save_egraph, _x.use_egraph,) = _struct_13d3B.unpack(str[start:end])
      self.feedback_paths = bool(self.feedback_paths)
      self.save_egraph = bool(self.save_egraph)
      self.use_egraph = bool(self.use_egraph)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs))
      _x = self.start.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w))
      length = len(self.rarm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rarm_start.tostring())
      length = len(self.larm_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.larm_start.tostring())
      length = len(self.body_start)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.body_start.tostring())
      length = len(self.rarm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.rarm_goal.tostring())
      length = len(self.larm_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.larm_goal.tostring())
      length = len(self.body_goal)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.body_goal.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs))
      _x = self.goal.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d.pack(_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w))
      length = len(self.absolute_xyzrpy_tolerance)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.absolute_xyzrpy_tolerance.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs))
      _x = self.rarm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_7d3I.pack(_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs))
      _x = self.larm_object.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_13d3B.pack(_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.egraph_eps, _x.final_egraph_eps, _x.dec_egraph_eps, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.feedback_paths, _x.save_egraph, _x.use_egraph))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.start is None:
        self.start = geometry_msgs.msg.PoseStamped()
      if self.goal is None:
        self.goal = geometry_msgs.msg.PoseStamped()
      if self.rarm_object is None:
        self.rarm_object = geometry_msgs.msg.PoseStamped()
      if self.larm_object is None:
        self.larm_object = geometry_msgs.msg.PoseStamped()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.start.header.seq, _x.start.header.stamp.secs, _x.start.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.start.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.start.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.start.pose.position.x, _x.start.pose.position.y, _x.start.pose.position.z, _x.start.pose.orientation.x, _x.start.pose.orientation.y, _x.start.pose.orientation.z, _x.start.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_start = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.rarm_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.larm_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.body_goal = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.goal.header.seq, _x.goal.header.stamp.secs, _x.goal.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.goal.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.goal.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 56
      (_x.goal.pose.position.x, _x.goal.pose.position.y, _x.goal.pose.position.z, _x.goal.pose.orientation.x, _x.goal.pose.orientation.y, _x.goal.pose.orientation.z, _x.goal.pose.orientation.w,) = _struct_7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.absolute_xyzrpy_tolerance = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      _x = self
      start = end
      end += 12
      (_x.rarm_object.header.seq, _x.rarm_object.header.stamp.secs, _x.rarm_object.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.rarm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.rarm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 68
      (_x.rarm_object.pose.position.x, _x.rarm_object.pose.position.y, _x.rarm_object.pose.position.z, _x.rarm_object.pose.orientation.x, _x.rarm_object.pose.orientation.y, _x.rarm_object.pose.orientation.z, _x.rarm_object.pose.orientation.w, _x.larm_object.header.seq, _x.larm_object.header.stamp.secs, _x.larm_object.header.stamp.nsecs,) = _struct_7d3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.larm_object.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.larm_object.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 107
      (_x.larm_object.pose.position.x, _x.larm_object.pose.position.y, _x.larm_object.pose.position.z, _x.larm_object.pose.orientation.x, _x.larm_object.pose.orientation.y, _x.larm_object.pose.orientation.z, _x.larm_object.pose.orientation.w, _x.egraph_eps, _x.final_egraph_eps, _x.dec_egraph_eps, _x.initial_eps, _x.final_eps, _x.dec_eps, _x.feedback_paths, _x.save_egraph, _x.use_egraph,) = _struct_13d3B.unpack(str[start:end])
      self.feedback_paths = bool(self.feedback_paths)
      self.save_egraph = bool(self.save_egraph)
      self.use_egraph = bool(self.use_egraph)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_13d3B = struct.Struct("<13d3B")
_struct_3I = struct.Struct("<3I")
_struct_7d = struct.Struct("<7d")
_struct_7d3I = struct.Struct("<7d3I")
"""autogenerated by genpy from monolithic_pr2_planner_node/GetMobileArmPlanResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import trajectory_msgs.msg
import genpy
import std_msgs.msg

class GetMobileArmPlanResponse(genpy.Message):
  _md5sum = "772cf36670d0cc0bb947f449eafd6cce"
  _type = "monolithic_pr2_planner_node/GetMobileArmPlanResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

trajectory_msgs/JointTrajectory trajectory
trajectory_msgs/JointTrajectory body_trajectory


string[] stats_field_names
float64[] stats


================================================================================
MSG: trajectory_msgs/JointTrajectory
Header header
string[] joint_names
JointTrajectoryPoint[] points
================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.secs: seconds (stamp_secs) since epoch
# * stamp.nsecs: nanoseconds since stamp_secs
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: trajectory_msgs/JointTrajectoryPoint
float64[] positions
float64[] velocities
float64[] accelerations
duration time_from_start
"""
  __slots__ = ['trajectory','body_trajectory','stats_field_names','stats']
  _slot_types = ['trajectory_msgs/JointTrajectory','trajectory_msgs/JointTrajectory','string[]','float64[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       trajectory,body_trajectory,stats_field_names,stats

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(GetMobileArmPlanResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.stats_field_names is None:
        self.stats_field_names = []
      if self.stats is None:
        self.stats = []
    else:
      self.trajectory = trajectory_msgs.msg.JointTrajectory()
      self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      self.stats_field_names = []
      self.stats = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        _v1 = val1.time_from_start
        _x = _v1
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs))
      _x = self.body_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.body_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.body_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.positions))
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.velocities))
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(struct.pack(pattern, *val1.accelerations))
        _v2 = val1.time_from_start
        _x = _v2
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(struct.pack(pattern, *self.stats))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        _v3 = val1.time_from_start
        _x = _v3
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.body_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.body_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = struct.unpack(pattern, str[start:end])
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = struct.unpack(pattern, str[start:end])
        _v4 = val1.time_from_start
        _x = _v4
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.body_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs))
      _x = self.trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        _v5 = val1.time_from_start
        _x = _v5
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      _x = self
      buff.write(_struct_3I.pack(_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs))
      _x = self.body_trajectory.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.body_trajectory.joint_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.joint_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.body_trajectory.points)
      buff.write(_struct_I.pack(length))
      for val1 in self.body_trajectory.points:
        length = len(val1.positions)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.positions.tostring())
        length = len(val1.velocities)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.velocities.tostring())
        length = len(val1.accelerations)
        buff.write(_struct_I.pack(length))
        pattern = '<%sd'%length
        buff.write(val1.accelerations.tostring())
        _v6 = val1.time_from_start
        _x = _v6
        buff.write(_struct_2i.pack(_x.secs, _x.nsecs))
      length = len(self.stats_field_names)
      buff.write(_struct_I.pack(length))
      for val1 in self.stats_field_names:
        length = len(val1)
        if python3 or type(val1) == unicode:
          val1 = val1.encode('utf-8')
          length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.stats)
      buff.write(_struct_I.pack(length))
      pattern = '<%sd'%length
      buff.write(self.stats.tostring())
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.trajectory is None:
        self.trajectory = trajectory_msgs.msg.JointTrajectory()
      if self.body_trajectory is None:
        self.body_trajectory = trajectory_msgs.msg.JointTrajectory()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.trajectory.header.seq, _x.trajectory.header.stamp.secs, _x.trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v7 = val1.time_from_start
        _x = _v7
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.trajectory.points.append(val1)
      _x = self
      start = end
      end += 12
      (_x.body_trajectory.header.seq, _x.body_trajectory.header.stamp.secs, _x.body_trajectory.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.body_trajectory.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.body_trajectory.header.frame_id = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.joint_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.body_trajectory.joint_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.body_trajectory.points = []
      for i in range(0, length):
        val1 = trajectory_msgs.msg.JointTrajectoryPoint()
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.positions = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.velocities = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        pattern = '<%sd'%length
        start = end
        end += struct.calcsize(pattern)
        val1.accelerations = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
        _v8 = val1.time_from_start
        _x = _v8
        start = end
        end += 8
        (_x.secs, _x.nsecs,) = _struct_2i.unpack(str[start:end])
        self.body_trajectory.points.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.stats_field_names = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        if python3:
          val1 = str[start:end].decode('utf-8')
        else:
          val1 = str[start:end]
        self.stats_field_names.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sd'%length
      start = end
      end += struct.calcsize(pattern)
      self.stats = numpy.frombuffer(str[start:end], dtype=numpy.float64, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2i = struct.Struct("<2i")
class GetMobileArmPlan(object):
  _type          = 'monolithic_pr2_planner_node/GetMobileArmPlan'
  _md5sum = 'a5c2034a8db2f784ee5d200d64f65ee9'
  _request_class  = GetMobileArmPlanRequest
  _response_class = GetMobileArmPlanResponse
